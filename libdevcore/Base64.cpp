/*
   base64.cpp and base64.h
   base64 encoding and decoding with C++.
   More information at
     https://renenyffenegger.ch/notes/development/Base64/Encoding-and-decoding-base-64-with-cpp
   Version: 2.rc.04 (release candidate)
   Copyright (C) 2004-2017, 2020 René Nyffenegger
   This source code is provided 'as-is', without any express or implied
   warranty. In no event will the author be held liable for any damages
   arising from the use of this software.
   Permission is granted to anyone to use this software for any purpose,
   including commercial applications, and to alter it and redistribute it
   freely, subject to the following restrictions:
   1. The origin of this source code must not be misrepresented; you must not
      claim that you wrote the original source code. If you use this source code
      in a product, an acknowledgment in the product documentation would be
      appreciated but is not required.
   2. Altered source versions must be plainly marked as such, and must not be
      misrepresented as being the original source code.
   3. This notice may not be removed or altered from any source distribution.
   René Nyffenegger rene.nyffenegger@adp-gmbh.ch
*/

/**
 * Base64编解码
 * @file: Base64.cpp
 * @author: rancheng <rc4work@163.com>
 * @date: 2021-01-16
 */
#include "Base64.h"

namespace dev {

// 编解码表（Std）
static const char s_paddingChStd = '=';
static const char s_encodeMapStd[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                     "abcdefghijklmnopqrstuvwxyz"
                                     "0123456789"
                                     "+/";
static const Byte s_decodeMapStd[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//  空格    !     "     #     $     %     &     '     (     )     *     +     ,     -     .     /
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xff, 0xff, 0xff, 0x3f,
//    0     1     2     3     4     5     6     7     8     9     :     ;     <     =     >     ?
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    @     A     B     C     D     E     F     G     H     I     J     K     L     M     N     O
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
//    P     Q     R     S     T     U     V     W     X     Y     Z     [     \     ]     ^     _
    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff,
//    `     a     b     c     d     e     f     g     h     i     j     k     l     m     n     o
    0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
//    p     q     r     s     t     u     v     w     x     y     z     {     |     }     ~
    0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 编解码表（URL）
static const char s_paddingChURL = '=';
static const char s_encodeMapURL[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                     "abcdefghijklmnopqrstuvwxyz"
                                     "0123456789"
                                     "-_";
static const Byte s_decodeMapURL[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//  空格    !     "     #     $     %     &     '     (     )     *     +     ,     -     .     /
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xff, 0xff,
//    0     1     2     3     4     5     6     7     8     9     :     ;     <     =     >     ?
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    @     A     B     C     D     E     F     G     H     I     J     K     L     M     N     O
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
//    P     Q     R     S     T     U     V     W     X     Y     Z     [     \     ]     ^     _
    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0x3f,
//    `     a     b     c     d     e     f     g     h     i     j     k     l     m     n     o
    0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
//    p     q     r     s     t     u     v     w     x     y     z     {     |     }     ~
    0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 测试decodeMap是否设置正确
static bool checkDecodeMap(const char* encodeMap, const Byte* decodeMap) {
    Byte goodDecodeMap[256];
    for (auto& b : goodDecodeMap) {
        b = 0xff;
    }
    for (int i = 0; i < 64; ++i) {
        goodDecodeMap[(Byte)encodeMap[i]] = i;
    }
    for (int i = 0; i < 256; ++i) {
        if (goodDecodeMap[i] != decodeMap[i]) {
            return false;
        }
    }
    return true;
}

static std::string base64Encode(BytesConstRef bs, const char* encodeMap, char paddingCh) {
    // 提前分配好内存
    auto len = bs.size();
    std::string ret((len + 2) / 3 * 4, '\0');

    // 每3个字节转换为4个字符，不足的补填充字符
    for (size_t i = 0, off = 0; i < len; i += 3) {
        ret[off++] = encodeMap[(bs[i] & 0xfc) >> 2];
        if (i + 1 < len) {
            ret[off++] = encodeMap[((bs[i] & 0x03) << 4) + ((bs[i + 1] & 0xf0) >> 4)];
            if (i + 2 < len) {
                ret[off++] = encodeMap[((bs[i + 1] & 0x0f) << 2) + ((bs[i + 2] & 0xc0) >> 6)];
                ret[off++] = encodeMap[bs[i + 2] & 0x3f];
            } else {
                ret[off++] = encodeMap[(bs[i + 1] & 0x0f) << 2];
                ret[off++] = paddingCh;
            }
        } else {
            ret[off++] = encodeMap[(bs[i] & 0x03) << 4];
            ret[off++] = paddingCh;
            ret[off++] = paddingCh;
        }
    }

    return ret;
}

static Bytes base64Decode(const std::string& base64, const Byte* decodeMap, char paddingCh) {
    // 提前分配内存
    auto len = base64.size();
    Bytes ret((len + 3) / 4 * 3);

    // 每4个字符转换为3个字节
    size_t off = 0;
    for (size_t i = 0; i < len; i += 4) {
        Byte one = decodeMap[(Byte)base64[i]];
        // C++11标准保证str[str.size()]为'\0'，所以当输入不是4N长度时就会抛出BadBase64Ch异常
        Byte two = decodeMap[(Byte)base64[i + 1]];
        if (one == 0xff || two == 0xff) {
            throw BadBase64Ch();
        }
        ret[off++] = (one << 2) + ((two & 0x30) >> 4);
        if (base64[i + 2] != paddingCh) {
            Byte three = decodeMap[(Byte)base64[i + 2]];
            if (three == 0xff) {
                throw BadBase64Ch();
            }
            ret[off++] = ((two & 0x0f) << 4) + ((three & 0x3c) >> 2);
            if (base64[i + 3] != paddingCh) {
                Byte four = decodeMap[(Byte)base64[i + 3]];
                if (four == 0xff) {
                    throw BadBase64Ch();
                }
                ret[off++] = ((three & 0x03) << 6) + four;
            }
        }
    }

    ret.resize(off);
    return ret;
}

// 将字节数组转换为Base64编码的字符串（标准base64字符集）
std::string toBase64Std(BytesConstRef bs) {
    return base64Encode(bs, s_encodeMapStd, s_paddingChStd);
}

// 将字节数组转换为Base64编码的字符串（对url合法的base64字符集）
std::string toBase64URL(BytesConstRef bs) {
    return base64Encode(bs, s_encodeMapURL, s_paddingChURL);
}

/**
 * 将Base64编码的字符串转换为字节数组
 * @param base64 Base64编码的字符串（标准字符集）
 * @return 对应的字节数组
 * @throw 遇到非法Base64字符抛出BadBase64Ch异常
 */
Bytes fromBase64Std(const std::string& base64) {
    assert(checkDecodeMap(s_encodeMapStd, s_decodeMapStd));

    return base64Decode(base64, s_decodeMapStd, s_paddingChStd);
}

/**
 * 将Base64编码的字符串转换为字节数组
 * @param base64 Base64编码的字符串（对url合法的字符集）
 * @return 对应的字节数组
 * @throw 遇到非法Base64字符抛出BadBase64Ch异常
 */
Bytes fromBase64URL(const std::string& base64) {
    assert(checkDecodeMap(s_encodeMapURL, s_decodeMapURL));

    return base64Decode(base64, s_decodeMapURL, s_paddingChURL);
}

}   // namespace dev