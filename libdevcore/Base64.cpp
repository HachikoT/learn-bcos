/**
 * Base64编解码
 * @file: Base64.cpp
 * @author: rancheng <rc4work@163.com>
 * @date: 2021-01-16
 */
#include "Base64.h"

namespace dev {

// 编解码表（Std）
static const char s_paddingChStd = '=';
static const char s_encodeMapStd[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                     "abcdefghijklmnopqrstuvwxyz"
                                     "0123456789"
                                     "+/";
static const Byte s_decodeMapStd[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//  空格    !     "     #     $     %     &     '     (     )     *     +     ,     -     .     /
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xff, 0xff, 0xff, 0x3f,
//    0     1     2     3     4     5     6     7     8     9     :     ;     <     =     >     ?
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    @     A     B     C     D     E     F     G     H     I     J     K     L     M     N     O
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
//    P     Q     R     S     T     U     V     W     X     Y     Z     [     \     ]     ^     _
    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff,
//    `     a     b     c     d     e     f     g     h     i     j     k     l     m     n     o
    0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
//    p     q     r     s     t     u     v     w     x     y     z     {     |     }     ~
    0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// 编解码表（URL）
static const char s_paddingChURL = '=';
static const char s_encodeMapURL[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                                     "abcdefghijklmnopqrstuvwxyz"
                                     "0123456789"
                                     "-_";
static const Byte s_decodeMapURL[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//  空格    !     "     #     $     %     &     '     (     )     *     +     ,     -     .     /
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0xff, 0xff,
//    0     1     2     3     4     5     6     7     8     9     :     ;     <     =     >     ?
    0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    @     A     B     C     D     E     F     G     H     I     J     K     L     M     N     O
    0xff, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e,
//    P     Q     R     S     T     U     V     W     X     Y     Z     [     \     ]     ^     _
    0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0xff, 0xff, 0xff, 0xff, 0x3f,
//    `     a     b     c     d     e     f     g     h     i     j     k     l     m     n     o
    0xff, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
//    p     q     r     s     t     u     v     w     x     y     z     {     |     }     ~
    0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// // 测试decodeMap是否设置正确
// static bool checkDecodeMap(const char* encodeMap, const Byte* decodeMap) {
//     Byte goodDecodeMap[256];
//     for (auto& b : goodDecodeMap) {
//         b = 0xff;
//     }
//     for (int i = 0; i < 64; ++i) {
//         goodDecodeMap[(Byte)encodeMap[i]] = i;
//     }
//     for (int i = 0; i < 256; ++i) {
//         if (goodDecodeMap[i] != decodeMap[i]) {
//             return false;
//         }
//     }
//     return true;
// }

static std::string base64Encode(BytesConstRef src, const char* encodeMap, char paddingCh) {
    // 提前分配好内存
    size_t len = src.size();
    std::string dst((len + 2) / 3 * 4, '\0');

    // 源和目的当前处理下标
    size_t srcIdx = 0;
    size_t dstIdx = 0;

    // 每3个字节转换为4个字符
    for (size_t i = 0, n = len / 3; i < n; ++i) {
        uint32_t ui24 = ((uint32_t)src[srcIdx]) << 16 | ((uint32_t)src[srcIdx + 1]) << 8 | ((uint32_t)src[srcIdx + 2]);

        dst[dstIdx + 0] = encodeMap[ui24 >> 18];
        dst[dstIdx + 1] = encodeMap[ui24 >> 12 & 0x3f];
        dst[dstIdx + 2] = encodeMap[ui24 >> 6 & 0x3f];
        dst[dstIdx + 3] = encodeMap[ui24 & 0x3f];

        srcIdx += 3;
        dstIdx += 4;
    }

    // 不足的补填充字符
    switch (len - srcIdx) {
    case 1:
        dst[dstIdx + 0] = encodeMap[src[srcIdx] >> 2];
        dst[dstIdx + 1] = encodeMap[(src[srcIdx] & 0x03) << 4];
        dst[dstIdx + 2] = paddingCh;
        dst[dstIdx + 3] = paddingCh;
        break;
    case 2:
        dst[dstIdx + 0] = encodeMap[src[srcIdx] >> 2];
        dst[dstIdx + 1] = encodeMap[(src[srcIdx] & 0x03) << 4 | src[srcIdx + 1] >> 4];
        dst[dstIdx + 2] = encodeMap[(src[srcIdx + 1] & 0x0f) << 2];
        dst[dstIdx + 3] = paddingCh;
        break;
    default:
        break;
    }

    return dst;
}

static Bytes base64Decode(const std::string& src, const Byte* decodeMap, char paddingCh) {
    // 提前分配内存
    size_t len = src.size();
    Bytes dst((len + 3) / 4 * 3);

    // 源和目的当前处理下标
    size_t srcIdx = 0;
    size_t dstIdx = 0;

    // 每4个字符转换为3个字节
    for (size_t i = 0, n = len / 4; i < n; ++i) {
        Byte one = decodeMap[(Byte)src[srcIdx + 0]];
        Byte two = decodeMap[(Byte)src[srcIdx + 1]];
        Byte three = decodeMap[(Byte)src[srcIdx + 2]];
        Byte four = decodeMap[(Byte)src[srcIdx + 3]];
        if (one == 0xff || two == 0xff) {
            throw BadBase64Ch();
        }
        if (three == 0xff || four == 0xff) {
            dst[dstIdx++] = one << 2 | (two & 0x30) >> 4;
            if (src[srcIdx + 2] != paddingCh) {
                if (three == 0xff) {
                    throw BadBase64Ch();
                }
                dst[dstIdx++] = (two & 0x0f) << 4 | (three & 0x3c) >> 2;
                if (src[srcIdx + 3] != paddingCh) {
                    throw BadBase64Ch();
                }
            }
        } else {
            // 绝大部分都是这种情况，单独拿出来优化一下效率
            uint32_t ui24 = ((uint32_t)one) << 18 | ((uint32_t)two) << 12 | ((uint32_t)three) << 6 | ((uint32_t)four);

            dst[dstIdx + 0] = ui24 >> 16;
            dst[dstIdx + 1] = ui24 >> 8 & 0xff;
            dst[dstIdx + 2] = ui24 & 0xff;

            dstIdx += 3;
        }

        srcIdx += 4;
    }

    // 允许没有结尾的填充字符
    switch (len - srcIdx) {
    case 1:
        throw BadBase64Ch();
    case 2: {
        Byte one = decodeMap[(Byte)src[srcIdx + 0]];
        Byte two = decodeMap[(Byte)src[srcIdx + 1]];
        if (one == 0xff || two == 0xff) {
            throw BadBase64Ch();
        }
        dst[dstIdx++] = (one << 2) + ((two & 0x30) >> 4);
    }
        break;
    case 3: {
        Byte one = decodeMap[(Byte)src[srcIdx + 0]];
        Byte two = decodeMap[(Byte)src[srcIdx + 1]];
        Byte three = decodeMap[(Byte)src[srcIdx + 2]];
        if (one == 0xff || two == 0xff) {
            throw BadBase64Ch();
        }
        dst[dstIdx++] = (one << 2) + ((two & 0x30) >> 4);
        if (src[srcIdx + 2] != paddingCh) {
            if (three == 0xff) {
                throw BadBase64Ch();
            }
            dst[dstIdx++] = ((two & 0x0f) << 4) + ((three & 0x3c) >> 2);
        }
    }
        break;
    default:
        break;
    }

    dst.resize(dstIdx);
    return dst;
}

// 将字节数组转换为Base64编码的字符串（标准base64字符集）
std::string toBase64Std(BytesConstRef src) {
    return base64Encode(src, s_encodeMapStd, s_paddingChStd);
}

// 将字节数组转换为Base64编码的字符串（对url合法的base64字符集）
std::string toBase64URL(BytesConstRef src) {
    return base64Encode(src, s_encodeMapURL, s_paddingChURL);
}

/**
 * 将Base64编码的字符串转换为字节数组
 * @param src Base64编码的字符串（标准base64字符集）
 * @return 对应的字节数组
 * @throw 遇到非法Base64字符抛出BadBase64Ch异常
 */
Bytes fromBase64Std(const std::string& src) {
    // assert(checkDecodeMap(s_encodeMapStd, s_decodeMapStd));

    return base64Decode(src, s_decodeMapStd, s_paddingChStd);
}

/**
 * 将Base64编码的字符串转换为字节数组
 * @param src Base64编码的字符串（对url合法的base64字符集）
 * @return 对应的字节数组
 * @throw 遇到非法Base64字符抛出BadBase64Ch异常
 */
Bytes fromBase64URL(const std::string& src) {
    // assert(checkDecodeMap(s_encodeMapURL, s_decodeMapURL));

    return base64Decode(src, s_decodeMapURL, s_paddingChURL);
}

}   // namespace dev