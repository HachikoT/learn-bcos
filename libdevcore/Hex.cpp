/**
 * 16进制编解码
 * @file: Hex.cpp
 * @author: rancheng <rc4work@163.com>
 * @date: 2021-01-03
 */
#include "Hex.h"
#include <cctype>

namespace dev {

// 编解码表
static const char s_encodeMap[] = "0123456789abcdef";
static const Byte s_decodeMap[] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//  空格    !     "     #     $     %     &     '     (     )     *     +     ,     -     .     /
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    0     1     2     3     4     5     6     7     8     9     :     ;     <     =     >     ?
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    @     A     B     C     D     E     F     G     H     I     J     K     L     M     N     O
    0xff, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    P     Q     R     S     T     U     V     W     X     Y     Z     [     \     ]     ^     _
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    `     a     b     c     d     e     f     g     h     i     j     k     l     m     n     o
    0xff, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
//    p     q     r     s     t     u     v     w     x     y     z     {     |     }     ~
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// // 测试decodeMap是否设置正确
// static bool checkDecodeMap(const char* encodeMap, const Byte* decodeMap) {
//     Byte goodDecodeMap[256];
//     for (auto& b : goodDecodeMap) {
//         b = 0xff;
//     }
//     for (int i = 0; i < 16; ++i) {
//         goodDecodeMap[(Byte)encodeMap[i]] = i;
//     }
//     encodeMap = "0123456789ABCDEF";
//     for (int i = 0; i < 16; ++i) {
//         goodDecodeMap[(Byte)encodeMap[i]] = i;
//     }
//     for (int i = 0; i < 256; ++i) {
//         if (goodDecodeMap[i] != decodeMap[i]) {
//             return false;
//         }
//     }
//     return true;
// }

// 将字节数组转换为16进制字符串（小写，不带前缀0x）
std::string toHex(BytesConstRef src) {
    // 提前分配好内存
    std::string dst(src.size() * 2, '\0');

    // 每一个字节转换为两个字符
    size_t dstIdx = 0;
    for (auto b : src) {
        dst[dstIdx + 0] = s_encodeMap[(b >> 4) & 0x0f];
        dst[dstIdx + 1] = s_encodeMap[b & 0x0f];
        dstIdx += 2;
    }

    return dst;
}

// 将字节数组转换为16进制字符串（小写，带前缀0x）
std::string toHex0x(BytesConstRef src) {
    // 提前分配好内存
    std::string dst = "0x";
    dst.resize(src.size() * 2 + 2);

    // 每一个字节转换为两个字符
    size_t dstIdx = 2;
    for (auto b : src) {
        dst[dstIdx + 0] = s_encodeMap[(b >> 4) & 0x0f];
        dst[dstIdx + 1] = s_encodeMap[b & 0x0f];
        dstIdx += 2;
    }

    return dst;
}

/**
 * 将16进制字符串转换为字节数组
 * @param src 16进制字符串（允许前缀0x或0X，不允许空白符）
 * @return 对应的字节数组
 * @throw 遇到非法16进制字符抛出BadHexCh异常
 */
Bytes fromHex(const std::string& src) {
    // assert(checkDecodeMap(s_encodeMap, s_decodeMap));

    // 跳过0x开头
    size_t srcLen = src.size();
    size_t srcIdx = srcLen >= 2 && src[0] == '0' && tolower(src[1]) == 'x' ? 2 : 0;

    // 提前分配好内存
    Bytes dst((srcLen - srcIdx + 1) / 2);
    size_t dstIdx = 0;

    // 奇数个字符，先处理一个
    if (srcLen % 2) {
        Byte l = s_decodeMap[(Byte)src[srcIdx++]];
        if (l == 0xff) {
            throw BadHexCh();
        }
        dst[dstIdx++] = l;
    }

    // 每两个字符转换为一个字节
    while (srcIdx != srcLen) {
        Byte h = s_decodeMap[(Byte)src[srcIdx++]];
        Byte l = s_decodeMap[(Byte)src[srcIdx++]];
        if (h == 0xff || l == 0xff) {
            throw BadHexCh();
        }
        dst[dstIdx++] = h << 4 | l;
    }

    return dst;
}

}   // namespace dev